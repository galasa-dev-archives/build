pipeline {
// Initially run on any agent
   agent {
      label 'docker-amd64'
   }
   environment {
//Configure Maven from the maven tooling in Jenkins
      def mvnHome = tool 'Default'
      PATH = "${mvnHome}/bin:${env.PATH}"
      
//Set some defaults
      def workspace = pwd()
   }
   stages {
// Set up the workspace, clear the git directories and setup the manve settings.xml files
      stage('prep-workspace') { 
         steps {
            configFileProvider([configFile(fileId: '86dde059-684b-4300-b595-64e83c2dd217', targetLocation: 'settings.xml')]) {
            }
            configFileProvider([configFile(fileId: '647688a9-d178-475b-ae65-80fca764a8c2', targetLocation: 'cit-settings.xml')]) {
            }
         
            dir('repository/dev.galasa') {
               deleteDir()
            }
            dir('repository/dev/galasa') {
               deleteDir()
            }
            dir('repository/codecoverage') {
               deleteDir()
            }
         }
      }
      
// clone the git repos for templating
      stage('clone-repos') {
         steps {
            dir('codecoverage/framework') {
               git branch: 'main',
                   url: 'https://github.com/galasa-dev/framework.git'
            }
            dir('codecoverage/extensions') {
               git branch: 'main',
                   url: 'https://github.com/galasa-dev/extensions.git'
            }
            dir('codecoverage/managers') {
               git branch: 'main',
                   url: 'https://github.com/galasa-dev/managers.git'
            }
            dir('codecoverage/obr') {
               git branch: 'main',
                   url: 'https://github.com/galasa-dev/obr.git'
            }
         }
      }


      
// Build the runtime repository
      stage('fetch-maven') {
         steps {
            withFolderProperties { 
               dir('codecoverage') {
                  sh "galasabld template --codecoverage  --template pomfetch.template --output pomfetch.xml -r obr/release.yaml -r framework/release.yaml -r extensions/release.yaml -r managers/release.yaml"
                  sh "mvn --settings ${workspace}/settings.xml -Dmaven.repo.local=${workspace}/repository -P ${MAVEN_PROFILE} -B -e -f pomfetch.xml clean process-sources"
               }
            }
         }
      }
      
      stage('fetch-files') {
         steps {
            withFolderProperties { 
               dir('codecoverage') {
                  sh "sh fetch.sh"
               }
            } 
         }
      }
      
      stage('build-reports') {
         steps {
            withFolderProperties { 
               dir('codecoverage') {
                  sh "sh buildunit.sh"
                  sh "sh buildint.sh"
                  sh "sh buildcombined.sh"
               }
            } 
         }
      }
      
      stage('docker') {
         steps {
            withFolderProperties { 
               dir('codecoverage') {            
                  sh "docker build --build-arg dockerRepository=${env.DOCKER_REPO} -t ${env.DOCKER_REPO}/galasa-code-coverage:${env.DOCKER_VERSION} ." 
                  sh "docker push ${env.DOCKER_REPO}/galasa-code-coverage:${env.DOCKER_VERSION}" 
               }
            }
         }
      }
   }
   post {
       // triggered when red sign
       failure {
           slackSend (channel: '#galasa-devs', color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
       }
    }
}
